using System;
using System.Threading.Tasks;
using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Input;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using XiaoZhi.Core.Services;
using XiaoZhi.Core.Interfaces;
using XiaoZhi.Core.Models;
using XiaoZhi.Core.Constants;
using XiaoZhi.WinUI.ViewModels;
using Microsoft.UI.Input;

namespace XiaoZhi.WinUI.Views;

/// <summary>
/// È¶ñÈ°µ - ËØ≠Èü≥ÂØπËØùÁïåÈù¢
/// </summary>
public sealed partial class HomePage : Page
{    private readonly ILogger<HomePage>? _logger;
    private readonly IVoiceChatService? _voiceChatService;
    private readonly EmotionManager? _emotionManager;
    private InterruptManager? _interruptManager;
    private bool _isConnected = false;
    private bool _isListening = false;
    private bool _isAutoMode = false;

    public HomePage()
    {
        this.InitializeComponent();
        
        try
        {
            _logger = App.GetService<ILogger<HomePage>>();
            _voiceChatService = App.GetService<IVoiceChatService>();
            _emotionManager = App.GetService<EmotionManager>();
        }
        catch (Exception ex)
        {
            // Â¶ÇÊûúÊúçÂä°Ëé∑ÂèñÂ§±Ë¥•ÔºåÁªßÁª≠ÂàùÂßãÂåñ‰ΩÜËÆ∞ÂΩïÈîôËØØ
            System.Diagnostics.Debug.WriteLine($"Failed to get services: {ex.Message}");
        }

        InitializeUI();
        BindEvents();
    }

    private void InitializeUI()
    {
        // ÂàùÂßãÂåñÁä∂ÊÄÅÊñáÊú¨
        StatusText.Text = "Áä∂ÊÄÅ: Êú™ËøûÊé•";
        ConnectionStatusText.Text = "Á¶ªÁ∫ø";
        TtsText.Text = "ÂæÖÂëΩ";
        DefaultEmotionText.Text = "üòä";

        // ËÆæÁΩÆÂàùÂßãÈü≥Èáè
        VolumeSlider.Value = 80;
        UpdateVolumeText(80);

        // ËÆæÁΩÆÊâãÂä®Ê®°Âºè‰∏∫ÈªòËÆ§Ê®°Âºè
        SwitchToManualMode();

        // ËÆæÁΩÆÂàùÂßãË°®ÊÉÖ
        SetEmotion("neutral");
    }

    private void BindEvents()
    {
        // È°µÈù¢‰∫ã‰ª∂
        this.Unloaded += HomePage_Unloaded;

        // ÁªëÂÆöËØ≠Èü≥ÊúçÂä°‰∫ã‰ª∂
        if (_voiceChatService != null)
        {
            _voiceChatService.DeviceStateChanged += OnDeviceStateChanged;
            _voiceChatService.VoiceChatStateChanged += OnVoiceChatStateChanged;
            _voiceChatService.MessageReceived += OnMessageReceived;
            _voiceChatService.ErrorOccurred += OnErrorOccurred;
        }
    }    
    #region ‰∫ã‰ª∂Â§ÑÁêÜ

    private void OnDeviceStateChanged(object? sender, DeviceState state)
    {
        this.DispatcherQueue.TryEnqueue(() =>
        {
            // Don't update connection state based on device state!
            // DeviceState.Idle means "connected but idle", not "disconnected"
            // Connection state should only be managed by actual connection/disconnection events
            
            switch (state)
            {
                case DeviceState.Listening:
                    StatusText.Text = "Áä∂ÊÄÅ: ÁõëÂê¨‰∏≠";
                    // Update emotion/visual indicators but don't touch connection state
                    SetEmotion("listening");
                    break;
                case DeviceState.Speaking:
                    StatusText.Text = "Áä∂ÊÄÅ: Êí≠Êîæ‰∏≠";
                    // Update emotion/visual indicators but don't touch connection state
                    SetEmotion("speaking");
                    break;
                case DeviceState.Connecting:
                    StatusText.Text = "Áä∂ÊÄÅ: ËøûÊé•‰∏≠";
                    // Update emotion/visual indicators but don't touch connection state
                    SetEmotion("thinking");
                    break;
                case DeviceState.Idle:
                default:
                    StatusText.Text = "Áä∂ÊÄÅ: ÂæÖÊú∫";
                    // Update emotion/visual indicators but don't touch connection state
                    SetEmotion("neutral");
                    break;
            }
        });
    }
    private void OnVoiceChatStateChanged(object? sender, bool isActive)
    {
        this.DispatcherQueue.TryEnqueue(() =>
        {
            _isListening = isActive;
            UpdateUIForVoiceChatState(isActive);
            
            // Update auto button text when in auto mode
            if (_isAutoMode && AutoButtonText != null)
            {
                if (_voiceChatService?.KeepListening == true && _isListening)
                {
                    AutoButtonText.Text = "ÂÅúÊ≠¢ÂØπËØù";
                }
                else if (_voiceChatService?.KeepListening == false || !_isListening)
                {
                    AutoButtonText.Text = "ÂºÄÂßãÂØπËØù";
                }
            }
        });
    }

    private void OnMessageReceived(object? sender, ChatMessage message)
    {
        this.DispatcherQueue.TryEnqueue(() =>
        {
            var displayText = message.Role switch
            {
                "user" => $"Áî®Êà∑: {message.Content}",
                "assistant" => $"Â∞èÊô∫: {message.Content}",
                _ => message.Content
            };
            
            AddMessage(displayText, false);
            
            // Â¶ÇÊûúÊòØÂä©ÊâãÊ∂àÊÅØÔºåÊõ¥Êñ∞TTSÊñáÊú¨
            if (message.Role == "assistant")
            {
                TtsText.Text = message.Content;
            }
        });
    }

    private void OnErrorOccurred(object? sender, string error)
    {
        this.DispatcherQueue.TryEnqueue(() =>
        {
            AddMessage($"ÈîôËØØ: {error}", true);
            _logger?.LogError("Voice chat error: {Error}", error);
        });
    }

    #endregion

    #region UIÊõ¥Êñ∞ÊñπÊ≥ï

    private void UpdateConnectionState(bool connected)
    {
        _isConnected = connected;
        
        // Êõ¥Êñ∞ËøûÊé•Áä∂ÊÄÅÊåáÁ§∫Âô®
        if (ConnectionIndicator != null)
        {
            var brush = connected ? 
                Application.Current.Resources["SystemFillColorSuccessBrush"] as Microsoft.UI.Xaml.Media.Brush :
                Application.Current.Resources["SystemFillColorCriticalBrush"] as Microsoft.UI.Xaml.Media.Brush;
            if (brush != null)
            {
                ConnectionIndicator.Background = brush;
            }
        }

        // Êõ¥Êñ∞ËøûÊé•Áä∂ÊÄÅÊñáÊú¨
        if (ConnectionStatusText != null)
        {
            ConnectionStatusText.Text = connected ? "Âú®Á∫ø" : "Á¶ªÁ∫ø";
        }

        // Êõ¥Êñ∞ÊåâÈíÆÁä∂ÊÄÅ
        if (ConnectButton != null)
        {
            ConnectButton.IsEnabled = !connected;
        }
        
        if (DisconnectButton != null)
        {
            DisconnectButton.IsEnabled = connected;
        }

        // Êõ¥Êñ∞ÂÖ∂‰ªñÊéß‰ª∂Áä∂ÊÄÅ
        if (ManualButton != null)
        {
            ManualButton.IsEnabled = connected;
        }
        
        if (AutoButton != null)
        {
            AutoButton.IsEnabled = connected;
        }
        
        if (AbortButton != null)
        {
            AbortButton.IsEnabled = connected;
        }
        
        if (ModeToggleButton != null)
        {
            ModeToggleButton.IsEnabled = connected;
        }

        if (MessageTextBox != null)
        {
            MessageTextBox.IsEnabled = connected;
        }
        
        if (SendButton != null)
        {
            SendButton.IsEnabled = connected;
        }
    }

    private void UpdateUIForVoiceChatState(bool isActive)
    {
        if (isActive)
        {
            ShowMicrophoneVisualizer(true);
            SetEmotion("listening");
        }
        else
        {
            ShowMicrophoneVisualizer(false);
            SetEmotion("neutral");
        }
    }

    private void SwitchToManualMode()
    {
        _isAutoMode = false;
        if (ManualButton != null) ManualButton.Visibility = Visibility.Visible;
        if (AutoButton != null) AutoButton.Visibility = Visibility.Collapsed;
        if (ModeToggleText != null) ModeToggleText.Text = "ÊâãÂä®ÂØπËØù";
    }    private void SwitchToAutoMode()
    {
        _isAutoMode = true;
        if (ManualButton != null) ManualButton.Visibility = Visibility.Collapsed;
        if (AutoButton != null) AutoButton.Visibility = Visibility.Visible;
        if (ModeToggleText != null) ModeToggleText.Text = "Ëá™Âä®ÂØπËØù";
        
        // Update button text based on current listening state and auto mode
        if (AutoButtonText != null) 
        {
            if (_voiceChatService?.KeepListening == true && _isListening)
            {
                AutoButtonText.Text = "ÂÅúÊ≠¢ÂØπËØù";
            }
            else
            {
                AutoButtonText.Text = "ÂºÄÂßãÂØπËØù";
            }
        }
    }

    private void UpdateModeUI(bool isAutoMode)
    {
        _isAutoMode = isAutoMode;
        
        if (isAutoMode)
        {
            SwitchToAutoMode();
        }
        else
        {
            SwitchToManualMode();
        }
    }

    private void ShowMicrophoneVisualizer(bool show)
    {
        if (show)
        {
            if (VolumeControlPanel != null) VolumeControlPanel.Visibility = Visibility.Collapsed;
            if (MicVisualizerPanel != null) MicVisualizerPanel.Visibility = Visibility.Visible;
            // TODO: Start microphone level animation
        }
        else
        {
            if (VolumeControlPanel != null) VolumeControlPanel.Visibility = Visibility.Visible;
            if (MicVisualizerPanel != null) MicVisualizerPanel.Visibility = Visibility.Collapsed;
            // TODO: Stop microphone level animation
        }
    }

    private void AddMessage(string message, bool isError = false)
    {
        var textBlock = new TextBlock
        {
            Text = message,
            Margin = new Thickness(0, 4, 0, 4),
            TextWrapping = TextWrapping.Wrap,
            Foreground = isError ? 
                Application.Current.Resources["SystemFillColorCriticalBrush"] as Microsoft.UI.Xaml.Media.Brush :
                Application.Current.Resources["TextFillColorPrimaryBrush"] as Microsoft.UI.Xaml.Media.Brush
        };

        // Â¶ÇÊûúÂ∑≤ÁªèÊúâÈªòËÆ§Ê∂àÊÅØÔºåÊ∏ÖÈô§ÂÆÉ
        if (MessagesPanel.Children.Count > 0 && 
            MessagesPanel.Children[0] is TextBlock defaultMsg && 
            defaultMsg.Text.Contains("Á≠âÂæÖÂØπËØùÂºÄÂßã"))
        {
            MessagesPanel.Children.Clear();
        }

        MessagesPanel.Children.Add(textBlock);
        
        // ÊªöÂä®Âà∞Â∫ïÈÉ®
        MessagesScrollViewer.ChangeView(null, MessagesScrollViewer.ScrollableHeight, null);
    }

    private void UpdateVolumeText(double value)
    {
        if (VolumeText != null)
        {
            VolumeText.Text = $"{(int)value}%";
        }
    }    
    private void SetEmotion(string emotionName)
    {
        try
        {
            if (_emotionManager != null && DefaultEmotionText != null)
            {
                var emoji = _emotionManager.GetEmotionEmoji(emotionName);
                DefaultEmotionText.Text = emoji;
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to set emotion: {EmotionName}", emotionName);
        }
    }

    #endregion

    #region ÊåâÈíÆ‰∫ã‰ª∂Â§ÑÁêÜ    
    private async void ConnectButton_Click(object sender, RoutedEventArgs e)
    {
        if (_isConnected || _voiceChatService == null) return;

        try
        {
            ConnectButton.IsEnabled = false;
            StatusText.Text = "Áä∂ÊÄÅ: ËøûÊé•‰∏≠";
            ConnectionStatusText.Text = "ËøûÊé•‰∏≠";
            ConnectionIndicator.Background = Application.Current.Resources["SystemFillColorCautionBrush"] as Microsoft.UI.Xaml.Media.Brush;

            // ÂàõÂª∫ÈÖçÁΩÆ
            var config = new XiaoZhiConfig
            {
                ServerUrl = "ws://localhost:8080/ws",
                UseWebSocket = true,
                EnableVoice = true,
                AudioSampleRate = 16000,
                AudioChannels = 1,
                AudioFormat = "opus"
            };
            await _voiceChatService.InitializeAsync(config);
            
            // Use the service's IsConnected property to determine actual connection state
            bool isConnected = _voiceChatService.IsConnected;
            UpdateConnectionState(isConnected);
            
            if (isConnected)
            {
                AddMessage("ËøûÊé•ÊàêÂäü");
                StatusText.Text = "Áä∂ÊÄÅ: Â∑≤ËøûÊé•";
            }
            else
            {
                AddMessage("ËøûÊé•Â§±Ë¥•: ÊúçÂä°Êú™ËøûÊé•", true);
                ConnectButton.IsEnabled = true;
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to connect to voice chat service");
            AddMessage($"ËøûÊé•Â§±Ë¥•: {ex.Message}", true);
            UpdateConnectionState(false);
            ConnectButton.IsEnabled = true;
        }
    }

    private async void DisconnectButton_Click(object sender, RoutedEventArgs e)
    {
        if (!_isConnected || _voiceChatService == null) return;

        try
        {
            DisconnectButton.IsEnabled = false;
            
            // ÂÅúÊ≠¢ÂΩìÂâçËØ≠Èü≥ÂØπËØù
            if (_isListening)
            {
                await _voiceChatService.StopVoiceChatAsync();
            }

            // Ê∏ÖÁêÜ‰∫ã‰ª∂ËÆ¢ÈòÖ
            _voiceChatService.MessageReceived -= OnMessageReceived;
            _voiceChatService.VoiceChatStateChanged -= OnVoiceChatStateChanged;
            _voiceChatService.ErrorOccurred -= OnErrorOccurred;
            _voiceChatService.DeviceStateChanged -= OnDeviceStateChanged;

            _voiceChatService.Dispose();
            // ÈáçÁΩÆÊâÄÊúâÁä∂ÊÄÅ
            _isConnected = false;
            _isListening = false;

            AddMessage("Â∑≤Êñ≠ÂºÄËøûÊé•");
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to disconnect from voice chat service");
            AddMessage($"Êñ≠ÂºÄËøûÊé•Â§±Ë¥•: {ex.Message}", true);
        }
    }

    private async void ManualButton_PointerPressed(object sender, PointerRoutedEventArgs e)
    {
        if (_voiceChatService == null || !_isConnected) return;

        try
        {
            if (!_isListening)
            {
                await _voiceChatService.StartVoiceChatAsync();
                ManualButtonText.Text = "ÊùæÂºÄÁªìÊùü";
                AddMessage("ÂºÄÂßãÂΩïÈü≥ÔºåÊùæÂºÄÁªìÊùü");
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to start manual voice chat");
            AddMessage($"ÂºÄÂßãÂΩïÈü≥Â§±Ë¥•: {ex.Message}", true);
        }
    }

    private async void ManualButton_PointerReleased(object sender, PointerRoutedEventArgs e)
    {
        if (_voiceChatService == null || !_isConnected) return;

        try
        {
            if (_isListening)
            {
                await _voiceChatService.StopVoiceChatAsync();
                ManualButtonText.Text = "Êåâ‰ΩèËØ¥ËØù";
                AddMessage("ÂΩïÈü≥ÁªìÊùüÔºåÊ≠£Âú®Â§ÑÁêÜ...");
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to stop manual voice chat");
            AddMessage($"ÂÅúÊ≠¢ÂΩïÈü≥Â§±Ë¥•: {ex.Message}", true);
        }
    }    private async void AutoButton_Click(object sender, RoutedEventArgs e)
    {
        if (_voiceChatService == null || !_isConnected) return;

        try
        {
            if (!_isListening)
            {
                // Enable auto mode and start the conversation
                _voiceChatService.KeepListening = true;
                await _voiceChatService.ToggleChatStateAsync();
                AutoButtonText.Text = "ÂÅúÊ≠¢ÂØπËØù";
                AddMessage("Ëá™Âä®ÂØπËØùÂ∑≤ÂºÄÂßã");
            }
            else
            {
                // Disable auto mode and stop the conversation
                _voiceChatService.KeepListening = false;
                await _voiceChatService.ToggleChatStateAsync();
                AutoButtonText.Text = "ÂºÄÂßãÂØπËØù";
                AddMessage("Ëá™Âä®ÂØπËØùÂ∑≤ÂÅúÊ≠¢");
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to toggle auto chat mode");
            AddMessage($"ÂàáÊç¢Ëá™Âä®ÂØπËØùÂ§±Ë¥•: {ex.Message}", true);
        }
    }

    private async void AbortButton_Click(object sender, RoutedEventArgs e)
    {
        try
        {
            if (_voiceChatService != null && _isListening)
            {                await _voiceChatService.StopVoiceChatAsync();
                AddMessage("Â∑≤‰∏≠Êñ≠ÂΩìÂâçÊìç‰Ωú");
                TtsText.Text = "ÂæÖÂëΩ";
                SetEmotion("neutral");
            }
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to abort current operation");
            AddMessage($"‰∏≠Êñ≠Êìç‰ΩúÂ§±Ë¥•: {ex.Message}", true);
        }
    }

    private async void SendButton_Click(object sender, RoutedEventArgs e)
    {
        var message = MessageTextBox.Text.Trim();
        if (string.IsNullOrEmpty(message) || _voiceChatService == null || !_isConnected)
            return;

        try
        {
            AddMessage($"Êàë: {message}", false);
            MessageTextBox.Text = "";
            await _voiceChatService.SendTextMessageAsync(message);
        }
        catch (Exception ex)
        {
            _logger?.LogError(ex, "Failed to send text message");
            AddMessage($"ÂèëÈÄÅÂ§±Ë¥•: {ex.Message}", true);
        }
    }

    private void MessageTextBox_KeyDown(object sender, KeyRoutedEventArgs e)
    {
        if (e.Key == Windows.System.VirtualKey.Enter)
        {
            SendButton_Click(sender, new RoutedEventArgs());
        }
    }

    private void ModeToggleButton_Click(object sender, RoutedEventArgs e)
    {
        _isAutoMode = !_isAutoMode;
        UpdateModeUI(_isAutoMode);
        AddMessage($"Â∑≤ÂàáÊç¢Âà∞{(_isAutoMode ? "Ëá™Âä®" : "ÊâãÂä®")}ÂØπËØùÊ®°Âºè");
    }

    private void VolumeSlider_ValueChanged(object sender, Microsoft.UI.Xaml.Controls.Primitives.RangeBaseValueChangedEventArgs e)
    {
        var value = e.NewValue;
        if (value < 0) return;
        
        UpdateVolumeText(value);
        // Note: IVoiceChatService doesn't have SetVolume method
        // if (_voiceChatService != null)
        // {
        //     _voiceChatService.SetVolume((float)(value / 100.0));
        // }
    }

    private void MuteButton_Click(object sender, RoutedEventArgs e)
    {
        var isMuted = VolumeSlider.Value == 0;
        
        if (isMuted)
        {
            VolumeSlider.Value = 80;
            MuteIcon.Glyph = "\uE767"; // Volume icon
        }
        else
        {
            VolumeSlider.Value = 0;
            MuteIcon.Glyph = "\uE74F"; // Mute icon
        }
    }

    #endregion

    #region È°µÈù¢ÁîüÂëΩÂë®Êúü

    private void HomePage_Unloaded(object sender, RoutedEventArgs e)
    {
        // Ê∏ÖÁêÜ‰∫ã‰ª∂ËÆ¢ÈòÖ
        if (_voiceChatService != null)
        {
            _voiceChatService.DeviceStateChanged -= OnDeviceStateChanged;
            _voiceChatService.VoiceChatStateChanged -= OnVoiceChatStateChanged;
            _voiceChatService.MessageReceived -= OnMessageReceived;
            _voiceChatService.ErrorOccurred -= OnErrorOccurred;
        }
    }

    #endregion

    private void ManualButton_PointerCaptureLost(object sender, PointerRoutedEventArgs e)
    {
        ManualButton_PointerReleased(sender, null!);
    }
}